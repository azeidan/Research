package com.insightfullogic.quad_trees

import scala.collection.mutable.Queue
import scala.collection.mutable.ListBuffer

class QuadTreeDigest extends Serializable {

    private var pointCount = 0
    private var totalPoints = 0
    var mbr: (Double, Double, Double, Double) = null
    var topLeft: QuadTreeDigest = null
    var topRight: QuadTreeDigest = null
    var bottomLeft: QuadTreeDigest = null
    var bottomRight: QuadTreeDigest = null

    var parent: QuadTreeDigest = null

    def getTotalPoints() = totalPoints
    def getPointCount() = pointCount

    def this(parent: QuadTreeDigest) = {

        this
        this.parent = parent
    }

    def this(quadTree: QuadTree) = {

        this

        val queueQT = Queue((quadTree, this))

        while (!queueQT.isEmpty) {

            val (fromQT, toQTDigest) = queueQT.dequeue()

            toQTDigest.mbr = computePointMBR(fromQT)
            toQTDigest.totalPoints = fromQT.getTotalPoints
            toQTDigest.pointCount = fromQT.getPoints.size

            if (fromQT.topLeft != null) {

                toQTDigest.topLeft = new QuadTreeDigest(toQTDigest)

                queueQT += ((fromQT.topLeft, toQTDigest.topLeft))
            }

            if (fromQT.topRight != null) {

                toQTDigest.topRight = new QuadTreeDigest(toQTDigest)

                queueQT += ((fromQT.topRight, toQTDigest.topRight))
            }

            if (fromQT.bottomLeft != null) {

                toQTDigest.bottomLeft = new QuadTreeDigest(toQTDigest)

                queueQT += ((fromQT.bottomLeft, toQTDigest.bottomLeft))
            }

            if (fromQT.bottomRight != null) {

                toQTDigest.bottomRight = new QuadTreeDigest(toQTDigest)

                queueQT += ((fromQT.bottomRight, toQTDigest.bottomRight))
            }
        }
    }

    def getAllMBRs() = {

        val lstQT = ListBuffer(this)

        lstQT.foreach(qTree => {

            if (qTree.topLeft != null) lstQT += qTree.topLeft
            if (qTree.topRight != null) lstQT += qTree.topRight
            if (qTree.bottomLeft != null) lstQT += qTree.bottomLeft
            if (qTree.bottomRight != null) lstQT += qTree.bottomRight
        })

        lstQT.map(_.mbr) //.flatMap(_.seq)
    }

    private def computePointMBR(quadTree: QuadTree) = {

        val (minX: Double, minY: Double, maxX: Double, maxY: Double) = quadTree.getPoints.fold(Double.MaxValue, Double.MaxValue, Double.MinValue, Double.MinValue)((mbr, point) => {

            val (a, b, c, d) = mbr.asInstanceOf[(Double, Double, Double, Double)]
            val pt = point match { case pt: Point => pt }

            (math.min(a, pt.x), math.min(b, pt.y), math.max(c, pt.x), math.max(d, pt.y))
        })

        //        (quadTree.getPoints.head.x, quadTree.getPoints.head.y, quadTree.getPoints.head.x, quadTree.getPoints.head.y)

        (minX, minY, maxX, maxY)
    }

    override def toString() =
        "%.8f\t%.8f\t%.8f\t%.8f\t%d\t%d".format(mbr._1, mbr._2, mbr._3, mbr._4, pointCount, totalPoints)
}
